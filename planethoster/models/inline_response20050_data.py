# coding: utf-8

"""
    PlanetHoster API

    | <a href=\"https://apidoc.planethoster.com/fr\">Version Fran√ßaise</a> ## Description The PlanetHoster API allows actions related to domain management and web hosting. ## Details - SSL only: we require that all requests be done over encrypted TLS/SSL connections. - Supported HTTP verbs are GET and POST. If your client does not support all HTTP verbs, you can override the verb with X-Http-Method-Override HTTP header. - Unless otherwise specified in the method documentation, all successful API calls return an **HTTP code 200** with a JSON object. - Errors are returned with an HTTP code 4XX or 5XX, a JSON object with properties \"error\" (an error message) and an \"error_code\" (optional, an integer). - Every string passed to and from the API needs to be UTF-8 encoded. - The API sends ETag headers and supports the If-None-Match header. - Unless otherwise specified, all API methods require authentication with api_user and api_key.  ## Authentication and whitelist 1. In order to be able to contact the API, you must whitelist your IPs. 2. API user and API key are required in the HTTP header.  Whitelisted IP and credentials can be found in the <a href=\"https://my.planethoster.com/domain-reseller\" target=\"_blank\">PlanetHoster Client Area / Reseller section</a>.  <SecurityDefinitions />   # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: tech@support.planethoster.info
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20050Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'using_ph_dns': 'object',
        'dkim': 'object',
        'spf': 'object',
        'd_marc': 'object'
    }

    attribute_map = {
        'using_ph_dns': 'usingPhDns',
        'dkim': 'dkim',
        'spf': 'spf',
        'd_marc': 'dMarc'
    }

    def __init__(self, using_ph_dns=None, dkim=None, spf=None, d_marc=None):  # noqa: E501
        """InlineResponse20050Data - a model defined in Swagger"""  # noqa: E501
        self._using_ph_dns = None
        self._dkim = None
        self._spf = None
        self._d_marc = None
        self.discriminator = None
        if using_ph_dns is not None:
            self.using_ph_dns = using_ph_dns
        if dkim is not None:
            self.dkim = dkim
        if spf is not None:
            self.spf = spf
        if d_marc is not None:
            self.d_marc = d_marc

    @property
    def using_ph_dns(self):
        """Gets the using_ph_dns of this InlineResponse20050Data.  # noqa: E501

        Is the domain using PlanetHoster DNS or not?  # noqa: E501

        :return: The using_ph_dns of this InlineResponse20050Data.  # noqa: E501
        :rtype: object
        """
        return self._using_ph_dns

    @using_ph_dns.setter
    def using_ph_dns(self, using_ph_dns):
        """Sets the using_ph_dns of this InlineResponse20050Data.

        Is the domain using PlanetHoster DNS or not?  # noqa: E501

        :param using_ph_dns: The using_ph_dns of this InlineResponse20050Data.  # noqa: E501
        :type: object
        """

        self._using_ph_dns = using_ph_dns

    @property
    def dkim(self):
        """Gets the dkim of this InlineResponse20050Data.  # noqa: E501

        Is the domain DKIM activated?  # noqa: E501

        :return: The dkim of this InlineResponse20050Data.  # noqa: E501
        :rtype: object
        """
        return self._dkim

    @dkim.setter
    def dkim(self, dkim):
        """Sets the dkim of this InlineResponse20050Data.

        Is the domain DKIM activated?  # noqa: E501

        :param dkim: The dkim of this InlineResponse20050Data.  # noqa: E501
        :type: object
        """

        self._dkim = dkim

    @property
    def spf(self):
        """Gets the spf of this InlineResponse20050Data.  # noqa: E501

        Is the domain SPF activated?  # noqa: E501

        :return: The spf of this InlineResponse20050Data.  # noqa: E501
        :rtype: object
        """
        return self._spf

    @spf.setter
    def spf(self, spf):
        """Sets the spf of this InlineResponse20050Data.

        Is the domain SPF activated?  # noqa: E501

        :param spf: The spf of this InlineResponse20050Data.  # noqa: E501
        :type: object
        """

        self._spf = spf

    @property
    def d_marc(self):
        """Gets the d_marc of this InlineResponse20050Data.  # noqa: E501

        Is the domain DMARC actived?  # noqa: E501

        :return: The d_marc of this InlineResponse20050Data.  # noqa: E501
        :rtype: object
        """
        return self._d_marc

    @d_marc.setter
    def d_marc(self, d_marc):
        """Sets the d_marc of this InlineResponse20050Data.

        Is the domain DMARC actived?  # noqa: E501

        :param d_marc: The d_marc of this InlineResponse20050Data.  # noqa: E501
        :type: object
        """

        self._d_marc = d_marc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20050Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20050Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
