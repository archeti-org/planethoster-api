# coding: utf-8

"""
    PlanetHoster API

    | <a href=\"https://apidoc.planethoster.com/fr\">Version Fran√ßaise</a> ## Description The PlanetHoster API allows actions related to domain management and web hosting. ## Details - SSL only: we require that all requests be done over encrypted TLS/SSL connections. - Supported HTTP verbs are GET and POST. If your client does not support all HTTP verbs, you can override the verb with X-Http-Method-Override HTTP header. - Unless otherwise specified in the method documentation, all successful API calls return an **HTTP code 200** with a JSON object. - Errors are returned with an HTTP code 4XX or 5XX, a JSON object with properties \"error\" (an error message) and an \"error_code\" (optional, an integer). - Every string passed to and from the API needs to be UTF-8 encoded. - The API sends ETag headers and supports the If-None-Match header. - Unless otherwise specified, all API methods require authentication with api_user and api_key.  ## Authentication and whitelist 1. In order to be able to contact the API, you must whitelist your IPs. 2. API user and API key are required in the HTTP header.  Whitelisted IP and credentials can be found in the <a href=\"https://my.planethoster.com/domain-reseller\" target=\"_blank\">PlanetHoster Client Area / Reseller section</a>.  <SecurityDefinitions />   # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: tech@support.planethoster.info
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResellerapiSavephdnsrecordsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sld': 'object',
        'tld': 'object',
        'type1': 'object',
        'hostname1': 'object',
        'address1': 'object',
        'ttl1': 'object',
        'priority1': 'object'
    }

    attribute_map = {
        'sld': 'sld',
        'tld': 'tld',
        'type1': 'type1',
        'hostname1': 'hostname1',
        'address1': 'address1',
        'ttl1': 'ttl1',
        'priority1': 'priority1'
    }

    def __init__(self, sld=None, tld=None, type1=None, hostname1=None, address1=None, ttl1=None, priority1=None):  # noqa: E501
        """ResellerapiSavephdnsrecordsBody - a model defined in Swagger"""  # noqa: E501
        self._sld = None
        self._tld = None
        self._type1 = None
        self._hostname1 = None
        self._address1 = None
        self._ttl1 = None
        self._priority1 = None
        self.discriminator = None
        self.sld = sld
        self.tld = tld
        self.type1 = type1
        self.hostname1 = hostname1
        self.address1 = address1
        if ttl1 is not None:
            self.ttl1 = ttl1
        if priority1 is not None:
            self.priority1 = priority1

    @property
    def sld(self):
        """Gets the sld of this ResellerapiSavephdnsrecordsBody.  # noqa: E501

        Domain name without the Top-Level Domain.  # noqa: E501

        :return: The sld of this ResellerapiSavephdnsrecordsBody.  # noqa: E501
        :rtype: object
        """
        return self._sld

    @sld.setter
    def sld(self, sld):
        """Sets the sld of this ResellerapiSavephdnsrecordsBody.

        Domain name without the Top-Level Domain.  # noqa: E501

        :param sld: The sld of this ResellerapiSavephdnsrecordsBody.  # noqa: E501
        :type: object
        """
        if sld is None:
            raise ValueError("Invalid value for `sld`, must not be `None`")  # noqa: E501

        self._sld = sld

    @property
    def tld(self):
        """Gets the tld of this ResellerapiSavephdnsrecordsBody.  # noqa: E501

        TLD without the leading period.  # noqa: E501

        :return: The tld of this ResellerapiSavephdnsrecordsBody.  # noqa: E501
        :rtype: object
        """
        return self._tld

    @tld.setter
    def tld(self, tld):
        """Sets the tld of this ResellerapiSavephdnsrecordsBody.

        TLD without the leading period.  # noqa: E501

        :param tld: The tld of this ResellerapiSavephdnsrecordsBody.  # noqa: E501
        :type: object
        """
        if tld is None:
            raise ValueError("Invalid value for `tld`, must not be `None`")  # noqa: E501

        self._tld = tld

    @property
    def type1(self):
        """Gets the type1 of this ResellerapiSavephdnsrecordsBody.  # noqa: E501

        Record types.  # noqa: E501

        :return: The type1 of this ResellerapiSavephdnsrecordsBody.  # noqa: E501
        :rtype: object
        """
        return self._type1

    @type1.setter
    def type1(self, type1):
        """Sets the type1 of this ResellerapiSavephdnsrecordsBody.

        Record types.  # noqa: E501

        :param type1: The type1 of this ResellerapiSavephdnsrecordsBody.  # noqa: E501
        :type: object
        """
        if type1 is None:
            raise ValueError("Invalid value for `type1`, must not be `None`")  # noqa: E501

        self._type1 = type1

    @property
    def hostname1(self):
        """Gets the hostname1 of this ResellerapiSavephdnsrecordsBody.  # noqa: E501

        Hostname with which to associate the DNS record.  # noqa: E501

        :return: The hostname1 of this ResellerapiSavephdnsrecordsBody.  # noqa: E501
        :rtype: object
        """
        return self._hostname1

    @hostname1.setter
    def hostname1(self, hostname1):
        """Sets the hostname1 of this ResellerapiSavephdnsrecordsBody.

        Hostname with which to associate the DNS record.  # noqa: E501

        :param hostname1: The hostname1 of this ResellerapiSavephdnsrecordsBody.  # noqa: E501
        :type: object
        """
        if hostname1 is None:
            raise ValueError("Invalid value for `hostname1`, must not be `None`")  # noqa: E501

        self._hostname1 = hostname1

    @property
    def address1(self):
        """Gets the address1 of this ResellerapiSavephdnsrecordsBody.  # noqa: E501

        Value depends on `type` given.   *For A and AAAA records, this is the IP address.*   *For CNAME records, this is the canonical name itself.*   *For MX and MXE records, this is the exchange.*   *For TXT records, this is the TXT data.*   # noqa: E501

        :return: The address1 of this ResellerapiSavephdnsrecordsBody.  # noqa: E501
        :rtype: object
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this ResellerapiSavephdnsrecordsBody.

        Value depends on `type` given.   *For A and AAAA records, this is the IP address.*   *For CNAME records, this is the canonical name itself.*   *For MX and MXE records, this is the exchange.*   *For TXT records, this is the TXT data.*   # noqa: E501

        :param address1: The address1 of this ResellerapiSavephdnsrecordsBody.  # noqa: E501
        :type: object
        """
        if address1 is None:
            raise ValueError("Invalid value for `address1`, must not be `None`")  # noqa: E501

        self._address1 = address1

    @property
    def ttl1(self):
        """Gets the ttl1 of this ResellerapiSavephdnsrecordsBody.  # noqa: E501

        DNS TTL (time to live) represents the time each step takes for DNS to cache a record  # noqa: E501

        :return: The ttl1 of this ResellerapiSavephdnsrecordsBody.  # noqa: E501
        :rtype: object
        """
        return self._ttl1

    @ttl1.setter
    def ttl1(self, ttl1):
        """Sets the ttl1 of this ResellerapiSavephdnsrecordsBody.

        DNS TTL (time to live) represents the time each step takes for DNS to cache a record  # noqa: E501

        :param ttl1: The ttl1 of this ResellerapiSavephdnsrecordsBody.  # noqa: E501
        :type: object
        """

        self._ttl1 = ttl1

    @property
    def priority1(self):
        """Gets the priority1 of this ResellerapiSavephdnsrecordsBody.  # noqa: E501

        Priority is for MX and MXE records only.  # noqa: E501

        :return: The priority1 of this ResellerapiSavephdnsrecordsBody.  # noqa: E501
        :rtype: object
        """
        return self._priority1

    @priority1.setter
    def priority1(self, priority1):
        """Sets the priority1 of this ResellerapiSavephdnsrecordsBody.

        Priority is for MX and MXE records only.  # noqa: E501

        :param priority1: The priority1 of this ResellerapiSavephdnsrecordsBody.  # noqa: E501
        :type: object
        """

        self._priority1 = priority1

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResellerapiSavephdnsrecordsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResellerapiSavephdnsrecordsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
