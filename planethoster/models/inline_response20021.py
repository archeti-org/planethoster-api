# coding: utf-8

"""
    PlanetHoster API

    | <a href=\"https://apidoc.planethoster.com/fr\">Version Fran√ßaise</a> ## Description The PlanetHoster API allows actions related to domain management and web hosting. ## Details - SSL only: we require that all requests be done over encrypted TLS/SSL connections. - Supported HTTP verbs are GET and POST. If your client does not support all HTTP verbs, you can override the verb with X-Http-Method-Override HTTP header. - Unless otherwise specified in the method documentation, all successful API calls return an **HTTP code 200** with a JSON object. - Errors are returned with an HTTP code 4XX or 5XX, a JSON object with properties \"error\" (an error message) and an \"error_code\" (optional, an integer). - Every string passed to and from the API needs to be UTF-8 encoded. - The API sends ETag headers and supports the If-None-Match header. - Unless otherwise specified, all API methods require authentication with api_user and api_key.  ## Authentication and whitelist 1. In order to be able to contact the API, you must whitelist your IPs. 2. API user and API key are required in the HTTP header.  Whitelisted IP and credentials can be found in the <a href=\"https://my.planethoster.com/domain-reseller\" target=\"_blank\">PlanetHoster Client Area / Reseller section</a>.  <SecurityDefinitions />   # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: tech@support.planethoster.info
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20021(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nb_active_or_suspended_accounts': 'object',
        'total_available_resources': 'InlineResponse20021TotalAvailableResources',
        'world_accounts': 'object'
    }

    attribute_map = {
        'nb_active_or_suspended_accounts': 'nb_active_or_suspended_accounts',
        'total_available_resources': 'total_available_resources',
        'world_accounts': 'world_accounts'
    }

    def __init__(self, nb_active_or_suspended_accounts=None, total_available_resources=None, world_accounts=None):  # noqa: E501
        """InlineResponse20021 - a model defined in Swagger"""  # noqa: E501
        self._nb_active_or_suspended_accounts = None
        self._total_available_resources = None
        self._world_accounts = None
        self.discriminator = None
        if nb_active_or_suspended_accounts is not None:
            self.nb_active_or_suspended_accounts = nb_active_or_suspended_accounts
        if total_available_resources is not None:
            self.total_available_resources = total_available_resources
        if world_accounts is not None:
            self.world_accounts = world_accounts

    @property
    def nb_active_or_suspended_accounts(self):
        """Gets the nb_active_or_suspended_accounts of this InlineResponse20021.  # noqa: E501

        The number of active or suspended sub-hostings.  # noqa: E501

        :return: The nb_active_or_suspended_accounts of this InlineResponse20021.  # noqa: E501
        :rtype: object
        """
        return self._nb_active_or_suspended_accounts

    @nb_active_or_suspended_accounts.setter
    def nb_active_or_suspended_accounts(self, nb_active_or_suspended_accounts):
        """Sets the nb_active_or_suspended_accounts of this InlineResponse20021.

        The number of active or suspended sub-hostings.  # noqa: E501

        :param nb_active_or_suspended_accounts: The nb_active_or_suspended_accounts of this InlineResponse20021.  # noqa: E501
        :type: object
        """

        self._nb_active_or_suspended_accounts = nb_active_or_suspended_accounts

    @property
    def total_available_resources(self):
        """Gets the total_available_resources of this InlineResponse20021.  # noqa: E501


        :return: The total_available_resources of this InlineResponse20021.  # noqa: E501
        :rtype: InlineResponse20021TotalAvailableResources
        """
        return self._total_available_resources

    @total_available_resources.setter
    def total_available_resources(self, total_available_resources):
        """Sets the total_available_resources of this InlineResponse20021.


        :param total_available_resources: The total_available_resources of this InlineResponse20021.  # noqa: E501
        :type: InlineResponse20021TotalAvailableResources
        """

        self._total_available_resources = total_available_resources

    @property
    def world_accounts(self):
        """Gets the world_accounts of this InlineResponse20021.  # noqa: E501

        List of all sub-hostings.  # noqa: E501

        :return: The world_accounts of this InlineResponse20021.  # noqa: E501
        :rtype: object
        """
        return self._world_accounts

    @world_accounts.setter
    def world_accounts(self, world_accounts):
        """Sets the world_accounts of this InlineResponse20021.

        List of all sub-hostings.  # noqa: E501

        :param world_accounts: The world_accounts of this InlineResponse20021.  # noqa: E501
        :type: object
        """

        self._world_accounts = world_accounts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20021, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20021):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
