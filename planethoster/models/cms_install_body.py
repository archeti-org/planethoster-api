# coding: utf-8

"""
    PlanetHoster API

    | <a href=\"https://apidoc.planethoster.com/fr\">Version Fran√ßaise</a> ## Description The PlanetHoster API allows actions related to domain management and web hosting. ## Details - SSL only: we require that all requests be done over encrypted TLS/SSL connections. - Supported HTTP verbs are GET and POST. If your client does not support all HTTP verbs, you can override the verb with X-Http-Method-Override HTTP header. - Unless otherwise specified in the method documentation, all successful API calls return an **HTTP code 200** with a JSON object. - Errors are returned with an HTTP code 4XX or 5XX, a JSON object with properties \"error\" (an error message) and an \"error_code\" (optional, an integer). - Every string passed to and from the API needs to be UTF-8 encoded. - The API sends ETag headers and supports the If-None-Match header. - Unless otherwise specified, all API methods require authentication with api_user and api_key.  ## Authentication and whitelist 1. In order to be able to contact the API, you must whitelist your IPs. 2. API user and API key are required in the HTTP header.  Whitelisted IP and credentials can be found in the <a href=\"https://my.planethoster.com/domain-reseller\" target=\"_blank\">PlanetHoster Client Area / Reseller section</a>.  <SecurityDefinitions />   # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: tech@support.planethoster.info
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CmsInstallBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cms_type': 'object',
        'path': 'object',
        'domain': 'object',
        'site_name': 'object',
        'admin_name': 'object',
        'admin_password': 'object',
        'email': 'object',
        'www': 'object',
        'https': 'object',
        'id': 'object'
    }

    attribute_map = {
        'cms_type': 'cmsType',
        'path': 'path',
        'domain': 'domain',
        'site_name': 'siteName',
        'admin_name': 'adminName',
        'admin_password': 'adminPassword',
        'email': 'email',
        'www': 'www',
        'https': 'https',
        'id': 'id'
    }

    def __init__(self, cms_type=None, path=None, domain=None, site_name=None, admin_name=None, admin_password=None, email=None, www=None, https=None, id=None):  # noqa: E501
        """CmsInstallBody - a model defined in Swagger"""  # noqa: E501
        self._cms_type = None
        self._path = None
        self._domain = None
        self._site_name = None
        self._admin_name = None
        self._admin_password = None
        self._email = None
        self._www = None
        self._https = None
        self._id = None
        self.discriminator = None
        self.cms_type = cms_type
        self.path = path
        self.domain = domain
        self.site_name = site_name
        self.admin_name = admin_name
        self.admin_password = admin_password
        self.email = email
        if www is not None:
            self.www = www
        if https is not None:
            self.https = https
        self.id = id

    @property
    def cms_type(self):
        """Gets the cms_type of this CmsInstallBody.  # noqa: E501

        CMS type  # noqa: E501

        :return: The cms_type of this CmsInstallBody.  # noqa: E501
        :rtype: object
        """
        return self._cms_type

    @cms_type.setter
    def cms_type(self, cms_type):
        """Sets the cms_type of this CmsInstallBody.

        CMS type  # noqa: E501

        :param cms_type: The cms_type of this CmsInstallBody.  # noqa: E501
        :type: object
        """
        if cms_type is None:
            raise ValueError("Invalid value for `cms_type`, must not be `None`")  # noqa: E501

        self._cms_type = cms_type

    @property
    def path(self):
        """Gets the path of this CmsInstallBody.  # noqa: E501

        The installation path  # noqa: E501

        :return: The path of this CmsInstallBody.  # noqa: E501
        :rtype: object
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this CmsInstallBody.

        The installation path  # noqa: E501

        :param path: The path of this CmsInstallBody.  # noqa: E501
        :type: object
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def domain(self):
        """Gets the domain of this CmsInstallBody.  # noqa: E501

        The domain of the CMS  # noqa: E501

        :return: The domain of this CmsInstallBody.  # noqa: E501
        :rtype: object
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this CmsInstallBody.

        The domain of the CMS  # noqa: E501

        :param domain: The domain of this CmsInstallBody.  # noqa: E501
        :type: object
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")  # noqa: E501

        self._domain = domain

    @property
    def site_name(self):
        """Gets the site_name of this CmsInstallBody.  # noqa: E501

        The title of the CMS  # noqa: E501

        :return: The site_name of this CmsInstallBody.  # noqa: E501
        :rtype: object
        """
        return self._site_name

    @site_name.setter
    def site_name(self, site_name):
        """Sets the site_name of this CmsInstallBody.

        The title of the CMS  # noqa: E501

        :param site_name: The site_name of this CmsInstallBody.  # noqa: E501
        :type: object
        """
        if site_name is None:
            raise ValueError("Invalid value for `site_name`, must not be `None`")  # noqa: E501

        self._site_name = site_name

    @property
    def admin_name(self):
        """Gets the admin_name of this CmsInstallBody.  # noqa: E501

        The administrator user  # noqa: E501

        :return: The admin_name of this CmsInstallBody.  # noqa: E501
        :rtype: object
        """
        return self._admin_name

    @admin_name.setter
    def admin_name(self, admin_name):
        """Sets the admin_name of this CmsInstallBody.

        The administrator user  # noqa: E501

        :param admin_name: The admin_name of this CmsInstallBody.  # noqa: E501
        :type: object
        """
        if admin_name is None:
            raise ValueError("Invalid value for `admin_name`, must not be `None`")  # noqa: E501

        self._admin_name = admin_name

    @property
    def admin_password(self):
        """Gets the admin_password of this CmsInstallBody.  # noqa: E501

        The admin password  # noqa: E501

        :return: The admin_password of this CmsInstallBody.  # noqa: E501
        :rtype: object
        """
        return self._admin_password

    @admin_password.setter
    def admin_password(self, admin_password):
        """Sets the admin_password of this CmsInstallBody.

        The admin password  # noqa: E501

        :param admin_password: The admin_password of this CmsInstallBody.  # noqa: E501
        :type: object
        """
        if admin_password is None:
            raise ValueError("Invalid value for `admin_password`, must not be `None`")  # noqa: E501

        self._admin_password = admin_password

    @property
    def email(self):
        """Gets the email of this CmsInstallBody.  # noqa: E501

        Administrator's email  # noqa: E501

        :return: The email of this CmsInstallBody.  # noqa: E501
        :rtype: object
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CmsInstallBody.

        Administrator's email  # noqa: E501

        :param email: The email of this CmsInstallBody.  # noqa: E501
        :type: object
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def www(self):
        """Gets the www of this CmsInstallBody.  # noqa: E501

        Force the www  # noqa: E501

        :return: The www of this CmsInstallBody.  # noqa: E501
        :rtype: object
        """
        return self._www

    @www.setter
    def www(self, www):
        """Sets the www of this CmsInstallBody.

        Force the www  # noqa: E501

        :param www: The www of this CmsInstallBody.  # noqa: E501
        :type: object
        """

        self._www = www

    @property
    def https(self):
        """Gets the https of this CmsInstallBody.  # noqa: E501

        Force the HTTPS  # noqa: E501

        :return: The https of this CmsInstallBody.  # noqa: E501
        :rtype: object
        """
        return self._https

    @https.setter
    def https(self, https):
        """Sets the https of this CmsInstallBody.

        Force the HTTPS  # noqa: E501

        :param https: The https of this CmsInstallBody.  # noqa: E501
        :type: object
        """

        self._https = https

    @property
    def id(self):
        """Gets the id of this CmsInstallBody.  # noqa: E501

        World account ID. Can be found with [/get-accounts](#operation/getAccounts).  # noqa: E501

        :return: The id of this CmsInstallBody.  # noqa: E501
        :rtype: object
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CmsInstallBody.

        World account ID. Can be found with [/get-accounts](#operation/getAccounts).  # noqa: E501

        :param id: The id of this CmsInstallBody.  # noqa: E501
        :type: object
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CmsInstallBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CmsInstallBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
