# coding: utf-8

"""
    PlanetHoster API

    | <a href=\"https://apidoc.planethoster.com/fr\">Version Fran√ßaise</a> ## Description The PlanetHoster API allows actions related to domain management and web hosting. ## Details - SSL only: we require that all requests be done over encrypted TLS/SSL connections. - Supported HTTP verbs are GET and POST. If your client does not support all HTTP verbs, you can override the verb with X-Http-Method-Override HTTP header. - Unless otherwise specified in the method documentation, all successful API calls return an **HTTP code 200** with a JSON object. - Errors are returned with an HTTP code 4XX or 5XX, a JSON object with properties \"error\" (an error message) and an \"error_code\" (optional, an integer). - Every string passed to and from the API needs to be UTF-8 encoded. - The API sends ETag headers and supports the If-None-Match header. - Unless otherwise specified, all API methods require authentication with api_user and api_key.  ## Authentication and whitelist 1. In order to be able to contact the API, you must whitelist your IPs. 2. API user and API key are required in the HTTP header.  Whitelisted IP and credentials can be found in the <a href=\"https://my.planethoster.com/domain-reseller\" target=\"_blank\">PlanetHoster Client Area / Reseller section</a>.  <SecurityDefinitions />   # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: tech@support.planethoster.info
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResellerapiSavecontactdetailsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sld': 'object',
        'tld': 'object',
        'registrant_first_name': 'object',
        'registrant_last_name': 'object',
        'registrant_email': 'object',
        'registrant_company_name': 'object',
        'registrant_address1': 'object',
        'registrant_address2': 'object',
        'registrant_city': 'object',
        'registrant_postal_code': 'object',
        'registrant_state': 'object',
        'registrant_country_code': 'object',
        'registrant_phone': 'object'
    }

    attribute_map = {
        'sld': 'sld',
        'tld': 'tld',
        'registrant_first_name': 'registrant_first_name',
        'registrant_last_name': 'registrant_last_name',
        'registrant_email': 'registrant_email',
        'registrant_company_name': 'registrant_company_name',
        'registrant_address1': 'registrant_address1',
        'registrant_address2': 'registrant_address2',
        'registrant_city': 'registrant_city',
        'registrant_postal_code': 'registrant_postal_code',
        'registrant_state': 'registrant_state',
        'registrant_country_code': 'registrant_country_code',
        'registrant_phone': 'registrant_phone'
    }

    def __init__(self, sld=None, tld=None, registrant_first_name=None, registrant_last_name=None, registrant_email=None, registrant_company_name=None, registrant_address1=None, registrant_address2=None, registrant_city=None, registrant_postal_code=None, registrant_state=None, registrant_country_code=None, registrant_phone=None):  # noqa: E501
        """ResellerapiSavecontactdetailsBody - a model defined in Swagger"""  # noqa: E501
        self._sld = None
        self._tld = None
        self._registrant_first_name = None
        self._registrant_last_name = None
        self._registrant_email = None
        self._registrant_company_name = None
        self._registrant_address1 = None
        self._registrant_address2 = None
        self._registrant_city = None
        self._registrant_postal_code = None
        self._registrant_state = None
        self._registrant_country_code = None
        self._registrant_phone = None
        self.discriminator = None
        self.sld = sld
        self.tld = tld
        self.registrant_first_name = registrant_first_name
        self.registrant_last_name = registrant_last_name
        self.registrant_email = registrant_email
        if registrant_company_name is not None:
            self.registrant_company_name = registrant_company_name
        self.registrant_address1 = registrant_address1
        if registrant_address2 is not None:
            self.registrant_address2 = registrant_address2
        self.registrant_city = registrant_city
        self.registrant_postal_code = registrant_postal_code
        self.registrant_state = registrant_state
        self.registrant_country_code = registrant_country_code
        self.registrant_phone = registrant_phone

    @property
    def sld(self):
        """Gets the sld of this ResellerapiSavecontactdetailsBody.  # noqa: E501

        Domain name without the Top-Level Domain.  # noqa: E501

        :return: The sld of this ResellerapiSavecontactdetailsBody.  # noqa: E501
        :rtype: object
        """
        return self._sld

    @sld.setter
    def sld(self, sld):
        """Sets the sld of this ResellerapiSavecontactdetailsBody.

        Domain name without the Top-Level Domain.  # noqa: E501

        :param sld: The sld of this ResellerapiSavecontactdetailsBody.  # noqa: E501
        :type: object
        """
        if sld is None:
            raise ValueError("Invalid value for `sld`, must not be `None`")  # noqa: E501

        self._sld = sld

    @property
    def tld(self):
        """Gets the tld of this ResellerapiSavecontactdetailsBody.  # noqa: E501

        TLD without the leading period.  # noqa: E501

        :return: The tld of this ResellerapiSavecontactdetailsBody.  # noqa: E501
        :rtype: object
        """
        return self._tld

    @tld.setter
    def tld(self, tld):
        """Sets the tld of this ResellerapiSavecontactdetailsBody.

        TLD without the leading period.  # noqa: E501

        :param tld: The tld of this ResellerapiSavecontactdetailsBody.  # noqa: E501
        :type: object
        """
        if tld is None:
            raise ValueError("Invalid value for `tld`, must not be `None`")  # noqa: E501

        self._tld = tld

    @property
    def registrant_first_name(self):
        """Gets the registrant_first_name of this ResellerapiSavecontactdetailsBody.  # noqa: E501

        First name of the domain name registrant contact.  # noqa: E501

        :return: The registrant_first_name of this ResellerapiSavecontactdetailsBody.  # noqa: E501
        :rtype: object
        """
        return self._registrant_first_name

    @registrant_first_name.setter
    def registrant_first_name(self, registrant_first_name):
        """Sets the registrant_first_name of this ResellerapiSavecontactdetailsBody.

        First name of the domain name registrant contact.  # noqa: E501

        :param registrant_first_name: The registrant_first_name of this ResellerapiSavecontactdetailsBody.  # noqa: E501
        :type: object
        """
        if registrant_first_name is None:
            raise ValueError("Invalid value for `registrant_first_name`, must not be `None`")  # noqa: E501

        self._registrant_first_name = registrant_first_name

    @property
    def registrant_last_name(self):
        """Gets the registrant_last_name of this ResellerapiSavecontactdetailsBody.  # noqa: E501

        Last name of the domain name registrant contact.  # noqa: E501

        :return: The registrant_last_name of this ResellerapiSavecontactdetailsBody.  # noqa: E501
        :rtype: object
        """
        return self._registrant_last_name

    @registrant_last_name.setter
    def registrant_last_name(self, registrant_last_name):
        """Sets the registrant_last_name of this ResellerapiSavecontactdetailsBody.

        Last name of the domain name registrant contact.  # noqa: E501

        :param registrant_last_name: The registrant_last_name of this ResellerapiSavecontactdetailsBody.  # noqa: E501
        :type: object
        """
        if registrant_last_name is None:
            raise ValueError("Invalid value for `registrant_last_name`, must not be `None`")  # noqa: E501

        self._registrant_last_name = registrant_last_name

    @property
    def registrant_email(self):
        """Gets the registrant_email of this ResellerapiSavecontactdetailsBody.  # noqa: E501

        Email address of the domain name registrant contact.  # noqa: E501

        :return: The registrant_email of this ResellerapiSavecontactdetailsBody.  # noqa: E501
        :rtype: object
        """
        return self._registrant_email

    @registrant_email.setter
    def registrant_email(self, registrant_email):
        """Sets the registrant_email of this ResellerapiSavecontactdetailsBody.

        Email address of the domain name registrant contact.  # noqa: E501

        :param registrant_email: The registrant_email of this ResellerapiSavecontactdetailsBody.  # noqa: E501
        :type: object
        """
        if registrant_email is None:
            raise ValueError("Invalid value for `registrant_email`, must not be `None`")  # noqa: E501

        self._registrant_email = registrant_email

    @property
    def registrant_company_name(self):
        """Gets the registrant_company_name of this ResellerapiSavecontactdetailsBody.  # noqa: E501

        Name of company or organization for which the registrant contact is registering the domain name. *Can be empty if it is for personal use.*   # noqa: E501

        :return: The registrant_company_name of this ResellerapiSavecontactdetailsBody.  # noqa: E501
        :rtype: object
        """
        return self._registrant_company_name

    @registrant_company_name.setter
    def registrant_company_name(self, registrant_company_name):
        """Sets the registrant_company_name of this ResellerapiSavecontactdetailsBody.

        Name of company or organization for which the registrant contact is registering the domain name. *Can be empty if it is for personal use.*   # noqa: E501

        :param registrant_company_name: The registrant_company_name of this ResellerapiSavecontactdetailsBody.  # noqa: E501
        :type: object
        """

        self._registrant_company_name = registrant_company_name

    @property
    def registrant_address1(self):
        """Gets the registrant_address1 of this ResellerapiSavecontactdetailsBody.  # noqa: E501

        Civic number and street name of company or registrant contact's primary residence.  # noqa: E501

        :return: The registrant_address1 of this ResellerapiSavecontactdetailsBody.  # noqa: E501
        :rtype: object
        """
        return self._registrant_address1

    @registrant_address1.setter
    def registrant_address1(self, registrant_address1):
        """Sets the registrant_address1 of this ResellerapiSavecontactdetailsBody.

        Civic number and street name of company or registrant contact's primary residence.  # noqa: E501

        :param registrant_address1: The registrant_address1 of this ResellerapiSavecontactdetailsBody.  # noqa: E501
        :type: object
        """
        if registrant_address1 is None:
            raise ValueError("Invalid value for `registrant_address1`, must not be `None`")  # noqa: E501

        self._registrant_address1 = registrant_address1

    @property
    def registrant_address2(self):
        """Gets the registrant_address2 of this ResellerapiSavecontactdetailsBody.  # noqa: E501

        Civic number and street name of registrant contact's secondary residence.   *Can be empty.*   # noqa: E501

        :return: The registrant_address2 of this ResellerapiSavecontactdetailsBody.  # noqa: E501
        :rtype: object
        """
        return self._registrant_address2

    @registrant_address2.setter
    def registrant_address2(self, registrant_address2):
        """Sets the registrant_address2 of this ResellerapiSavecontactdetailsBody.

        Civic number and street name of registrant contact's secondary residence.   *Can be empty.*   # noqa: E501

        :param registrant_address2: The registrant_address2 of this ResellerapiSavecontactdetailsBody.  # noqa: E501
        :type: object
        """

        self._registrant_address2 = registrant_address2

    @property
    def registrant_city(self):
        """Gets the registrant_city of this ResellerapiSavecontactdetailsBody.  # noqa: E501

        Name of the city in which registrant contact resides.  # noqa: E501

        :return: The registrant_city of this ResellerapiSavecontactdetailsBody.  # noqa: E501
        :rtype: object
        """
        return self._registrant_city

    @registrant_city.setter
    def registrant_city(self, registrant_city):
        """Sets the registrant_city of this ResellerapiSavecontactdetailsBody.

        Name of the city in which registrant contact resides.  # noqa: E501

        :param registrant_city: The registrant_city of this ResellerapiSavecontactdetailsBody.  # noqa: E501
        :type: object
        """
        if registrant_city is None:
            raise ValueError("Invalid value for `registrant_city`, must not be `None`")  # noqa: E501

        self._registrant_city = registrant_city

    @property
    def registrant_postal_code(self):
        """Gets the registrant_postal_code of this ResellerapiSavecontactdetailsBody.  # noqa: E501

        Postal code or ZIP code of registrant contact's residence.  # noqa: E501

        :return: The registrant_postal_code of this ResellerapiSavecontactdetailsBody.  # noqa: E501
        :rtype: object
        """
        return self._registrant_postal_code

    @registrant_postal_code.setter
    def registrant_postal_code(self, registrant_postal_code):
        """Sets the registrant_postal_code of this ResellerapiSavecontactdetailsBody.

        Postal code or ZIP code of registrant contact's residence.  # noqa: E501

        :param registrant_postal_code: The registrant_postal_code of this ResellerapiSavecontactdetailsBody.  # noqa: E501
        :type: object
        """
        if registrant_postal_code is None:
            raise ValueError("Invalid value for `registrant_postal_code`, must not be `None`")  # noqa: E501

        self._registrant_postal_code = registrant_postal_code

    @property
    def registrant_state(self):
        """Gets the registrant_state of this ResellerapiSavecontactdetailsBody.  # noqa: E501

        State or province of registrant contact's residence.  # noqa: E501

        :return: The registrant_state of this ResellerapiSavecontactdetailsBody.  # noqa: E501
        :rtype: object
        """
        return self._registrant_state

    @registrant_state.setter
    def registrant_state(self, registrant_state):
        """Sets the registrant_state of this ResellerapiSavecontactdetailsBody.

        State or province of registrant contact's residence.  # noqa: E501

        :param registrant_state: The registrant_state of this ResellerapiSavecontactdetailsBody.  # noqa: E501
        :type: object
        """
        if registrant_state is None:
            raise ValueError("Invalid value for `registrant_state`, must not be `None`")  # noqa: E501

        self._registrant_state = registrant_state

    @property
    def registrant_country_code(self):
        """Gets the registrant_country_code of this ResellerapiSavecontactdetailsBody.  # noqa: E501

        Two letters code of registrant contact's residence country.   <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\" target=\"_blank\">See country code list</a>   # noqa: E501

        :return: The registrant_country_code of this ResellerapiSavecontactdetailsBody.  # noqa: E501
        :rtype: object
        """
        return self._registrant_country_code

    @registrant_country_code.setter
    def registrant_country_code(self, registrant_country_code):
        """Sets the registrant_country_code of this ResellerapiSavecontactdetailsBody.

        Two letters code of registrant contact's residence country.   <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\" target=\"_blank\">See country code list</a>   # noqa: E501

        :param registrant_country_code: The registrant_country_code of this ResellerapiSavecontactdetailsBody.  # noqa: E501
        :type: object
        """
        if registrant_country_code is None:
            raise ValueError("Invalid value for `registrant_country_code`, must not be `None`")  # noqa: E501

        self._registrant_country_code = registrant_country_code

    @property
    def registrant_phone(self):
        """Gets the registrant_phone of this ResellerapiSavecontactdetailsBody.  # noqa: E501

        Phone number, including area code: '+1.' for Canada or '+33.' for France.   *With international calling code at the beginning.*   # noqa: E501

        :return: The registrant_phone of this ResellerapiSavecontactdetailsBody.  # noqa: E501
        :rtype: object
        """
        return self._registrant_phone

    @registrant_phone.setter
    def registrant_phone(self, registrant_phone):
        """Sets the registrant_phone of this ResellerapiSavecontactdetailsBody.

        Phone number, including area code: '+1.' for Canada or '+33.' for France.   *With international calling code at the beginning.*   # noqa: E501

        :param registrant_phone: The registrant_phone of this ResellerapiSavecontactdetailsBody.  # noqa: E501
        :type: object
        """
        if registrant_phone is None:
            raise ValueError("Invalid value for `registrant_phone`, must not be `None`")  # noqa: E501

        self._registrant_phone = registrant_phone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResellerapiSavecontactdetailsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResellerapiSavecontactdetailsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
