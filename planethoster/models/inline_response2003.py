# coding: utf-8

"""
    PlanetHoster API

    | <a href=\"https://apidoc.planethoster.com/fr\">Version Fran√ßaise</a> ## Description The PlanetHoster API allows actions related to domain management and web hosting. ## Details - SSL only: we require that all requests be done over encrypted TLS/SSL connections. - Supported HTTP verbs are GET and POST. If your client does not support all HTTP verbs, you can override the verb with X-Http-Method-Override HTTP header. - Unless otherwise specified in the method documentation, all successful API calls return an **HTTP code 200** with a JSON object. - Errors are returned with an HTTP code 4XX or 5XX, a JSON object with properties \"error\" (an error message) and an \"error_code\" (optional, an integer). - Every string passed to and from the API needs to be UTF-8 encoded. - The API sends ETag headers and supports the If-None-Match header. - Unless otherwise specified, all API methods require authentication with api_user and api_key.  ## Authentication and whitelist 1. In order to be able to contact the API, you must whitelist your IPs. 2. API user and API key are required in the HTTP header.  Whitelisted IP and credentials can be found in the <a href=\"https://my.planethoster.com/domain-reseller\" target=\"_blank\">PlanetHoster Client Area / Reseller section</a>.  <SecurityDefinitions />   # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: tech@support.planethoster.info
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2003(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'available': 'object',
        'message': 'object',
        'is_premium': 'object',
        'premium_register_price': 'object',
        'premium_renew_price': 'object'
    }

    attribute_map = {
        'available': 'available',
        'message': 'message',
        'is_premium': 'is_premium',
        'premium_register_price': 'premium_register_price',
        'premium_renew_price': 'premium_renew_price'
    }

    def __init__(self, available=None, message=None, is_premium=None, premium_register_price=None, premium_renew_price=None):  # noqa: E501
        """InlineResponse2003 - a model defined in Swagger"""  # noqa: E501
        self._available = None
        self._message = None
        self._is_premium = None
        self._premium_register_price = None
        self._premium_renew_price = None
        self.discriminator = None
        if available is not None:
            self.available = available
        if message is not None:
            self.message = message
        if is_premium is not None:
            self.is_premium = is_premium
        if premium_register_price is not None:
            self.premium_register_price = premium_register_price
        if premium_renew_price is not None:
            self.premium_renew_price = premium_renew_price

    @property
    def available(self):
        """Gets the available of this InlineResponse2003.  # noqa: E501

        Is the domain available?  # noqa: E501

        :return: The available of this InlineResponse2003.  # noqa: E501
        :rtype: object
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this InlineResponse2003.

        Is the domain available?  # noqa: E501

        :param available: The available of this InlineResponse2003.  # noqa: E501
        :type: object
        """

        self._available = available

    @property
    def message(self):
        """Gets the message of this InlineResponse2003.  # noqa: E501

        Message about domain availability.  # noqa: E501

        :return: The message of this InlineResponse2003.  # noqa: E501
        :rtype: object
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this InlineResponse2003.

        Message about domain availability.  # noqa: E501

        :param message: The message of this InlineResponse2003.  # noqa: E501
        :type: object
        """

        self._message = message

    @property
    def is_premium(self):
        """Gets the is_premium of this InlineResponse2003.  # noqa: E501

        Is the domain Premium?  # noqa: E501

        :return: The is_premium of this InlineResponse2003.  # noqa: E501
        :rtype: object
        """
        return self._is_premium

    @is_premium.setter
    def is_premium(self, is_premium):
        """Sets the is_premium of this InlineResponse2003.

        Is the domain Premium?  # noqa: E501

        :param is_premium: The is_premium of this InlineResponse2003.  # noqa: E501
        :type: object
        """

        self._is_premium = is_premium

    @property
    def premium_register_price(self):
        """Gets the premium_register_price of this InlineResponse2003.  # noqa: E501

        Registration price for one year in USD.  # noqa: E501

        :return: The premium_register_price of this InlineResponse2003.  # noqa: E501
        :rtype: object
        """
        return self._premium_register_price

    @premium_register_price.setter
    def premium_register_price(self, premium_register_price):
        """Sets the premium_register_price of this InlineResponse2003.

        Registration price for one year in USD.  # noqa: E501

        :param premium_register_price: The premium_register_price of this InlineResponse2003.  # noqa: E501
        :type: object
        """

        self._premium_register_price = premium_register_price

    @property
    def premium_renew_price(self):
        """Gets the premium_renew_price of this InlineResponse2003.  # noqa: E501

        Renewal price for 1 year in USD.  # noqa: E501

        :return: The premium_renew_price of this InlineResponse2003.  # noqa: E501
        :rtype: object
        """
        return self._premium_renew_price

    @premium_renew_price.setter
    def premium_renew_price(self, premium_renew_price):
        """Sets the premium_renew_price of this InlineResponse2003.

        Renewal price for 1 year in USD.  # noqa: E501

        :param premium_renew_price: The premium_renew_price of this InlineResponse2003.  # noqa: E501
        :type: object
        """

        self._premium_renew_price = premium_renew_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2003, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2003):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
