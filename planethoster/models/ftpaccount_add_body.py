# coding: utf-8

"""
    PlanetHoster API

    | <a href=\"https://apidoc.planethoster.com/fr\">Version Fran√ßaise</a> ## Description The PlanetHoster API allows actions related to domain management and web hosting. ## Details - SSL only: we require that all requests be done over encrypted TLS/SSL connections. - Supported HTTP verbs are GET and POST. If your client does not support all HTTP verbs, you can override the verb with X-Http-Method-Override HTTP header. - Unless otherwise specified in the method documentation, all successful API calls return an **HTTP code 200** with a JSON object. - Errors are returned with an HTTP code 4XX or 5XX, a JSON object with properties \"error\" (an error message) and an \"error_code\" (optional, an integer). - Every string passed to and from the API needs to be UTF-8 encoded. - The API sends ETag headers and supports the If-None-Match header. - Unless otherwise specified, all API methods require authentication with api_user and api_key.  ## Authentication and whitelist 1. In order to be able to contact the API, you must whitelist your IPs. 2. API user and API key are required in the HTTP header.  Whitelisted IP and credentials can be found in the <a href=\"https://my.planethoster.com/domain-reseller\" target=\"_blank\">PlanetHoster Client Area / Reseller section</a>.  <SecurityDefinitions />   # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: tech@support.planethoster.info
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FtpaccountAddBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domain': 'object',
        'ftp_user': 'object',
        'path': 'object',
        'password': 'object',
        'id': 'object'
    }

    attribute_map = {
        'domain': 'domain',
        'ftp_user': 'ftpUser',
        'path': 'path',
        'password': 'password',
        'id': 'id'
    }

    def __init__(self, domain=None, ftp_user=None, path=None, password=None, id=None):  # noqa: E501
        """FtpaccountAddBody - a model defined in Swagger"""  # noqa: E501
        self._domain = None
        self._ftp_user = None
        self._path = None
        self._password = None
        self._id = None
        self.discriminator = None
        self.domain = domain
        self.ftp_user = ftp_user
        self.path = path
        self.password = password
        self.id = id

    @property
    def domain(self):
        """Gets the domain of this FtpaccountAddBody.  # noqa: E501

        Domain name.  # noqa: E501

        :return: The domain of this FtpaccountAddBody.  # noqa: E501
        :rtype: object
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this FtpaccountAddBody.

        Domain name.  # noqa: E501

        :param domain: The domain of this FtpaccountAddBody.  # noqa: E501
        :type: object
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")  # noqa: E501

        self._domain = domain

    @property
    def ftp_user(self):
        """Gets the ftp_user of this FtpaccountAddBody.  # noqa: E501

        FTP username.  # noqa: E501

        :return: The ftp_user of this FtpaccountAddBody.  # noqa: E501
        :rtype: object
        """
        return self._ftp_user

    @ftp_user.setter
    def ftp_user(self, ftp_user):
        """Sets the ftp_user of this FtpaccountAddBody.

        FTP username.  # noqa: E501

        :param ftp_user: The ftp_user of this FtpaccountAddBody.  # noqa: E501
        :type: object
        """
        if ftp_user is None:
            raise ValueError("Invalid value for `ftp_user`, must not be `None`")  # noqa: E501

        self._ftp_user = ftp_user

    @property
    def path(self):
        """Gets the path of this FtpaccountAddBody.  # noqa: E501

        Path related to the FTP account.  # noqa: E501

        :return: The path of this FtpaccountAddBody.  # noqa: E501
        :rtype: object
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this FtpaccountAddBody.

        Path related to the FTP account.  # noqa: E501

        :param path: The path of this FtpaccountAddBody.  # noqa: E501
        :type: object
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def password(self):
        """Gets the password of this FtpaccountAddBody.  # noqa: E501

        Email account password.  # noqa: E501

        :return: The password of this FtpaccountAddBody.  # noqa: E501
        :rtype: object
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this FtpaccountAddBody.

        Email account password.  # noqa: E501

        :param password: The password of this FtpaccountAddBody.  # noqa: E501
        :type: object
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def id(self):
        """Gets the id of this FtpaccountAddBody.  # noqa: E501

        World account ID. Can be found with [/get-accounts](#operation/getAccounts).  # noqa: E501

        :return: The id of this FtpaccountAddBody.  # noqa: E501
        :rtype: object
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FtpaccountAddBody.

        World account ID. Can be found with [/get-accounts](#operation/getAccounts).  # noqa: E501

        :param id: The id of this FtpaccountAddBody.  # noqa: E501
        :type: object
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FtpaccountAddBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FtpaccountAddBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
