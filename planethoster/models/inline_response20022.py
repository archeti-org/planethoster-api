# coding: utf-8

"""
    PlanetHoster API

    | <a href=\"https://apidoc.planethoster.com/fr\">Version Fran√ßaise</a> ## Description The PlanetHoster API allows actions related to domain management and web hosting. ## Details - SSL only: we require that all requests be done over encrypted TLS/SSL connections. - Supported HTTP verbs are GET and POST. If your client does not support all HTTP verbs, you can override the verb with X-Http-Method-Override HTTP header. - Unless otherwise specified in the method documentation, all successful API calls return an **HTTP code 200** with a JSON object. - Errors are returned with an HTTP code 4XX or 5XX, a JSON object with properties \"error\" (an error message) and an \"error_code\" (optional, an integer). - Every string passed to and from the API needs to be UTF-8 encoded. - The API sends ETag headers and supports the If-None-Match header. - Unless otherwise specified, all API methods require authentication with api_user and api_key.  ## Authentication and whitelist 1. In order to be able to contact the API, you must whitelist your IPs. 2. API user and API key are required in the HTTP header.  Whitelisted IP and credentials can be found in the <a href=\"https://my.planethoster.com/domain-reseller\" target=\"_blank\">PlanetHoster Client Area / Reseller section</a>.  <SecurityDefinitions />   # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: tech@support.planethoster.info
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20022(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_created': 'object',
        'server_hostname': 'object',
        'server_ip': 'object',
        'id': 'object',
        'username': 'object',
        'password': 'object'
    }

    attribute_map = {
        'account_created': 'account_created',
        'server_hostname': 'server_hostname',
        'server_ip': 'server_ip',
        'id': 'id',
        'username': 'username',
        'password': 'password'
    }

    def __init__(self, account_created=None, server_hostname=None, server_ip=None, id=None, username=None, password=None):  # noqa: E501
        """InlineResponse20022 - a model defined in Swagger"""  # noqa: E501
        self._account_created = None
        self._server_hostname = None
        self._server_ip = None
        self._id = None
        self._username = None
        self._password = None
        self.discriminator = None
        if account_created is not None:
            self.account_created = account_created
        if server_hostname is not None:
            self.server_hostname = server_hostname
        if server_ip is not None:
            self.server_ip = server_ip
        if id is not None:
            self.id = id
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password

    @property
    def account_created(self):
        """Gets the account_created of this InlineResponse20022.  # noqa: E501

        Is the account created or not?  # noqa: E501

        :return: The account_created of this InlineResponse20022.  # noqa: E501
        :rtype: object
        """
        return self._account_created

    @account_created.setter
    def account_created(self, account_created):
        """Sets the account_created of this InlineResponse20022.

        Is the account created or not?  # noqa: E501

        :param account_created: The account_created of this InlineResponse20022.  # noqa: E501
        :type: object
        """

        self._account_created = account_created

    @property
    def server_hostname(self):
        """Gets the server_hostname of this InlineResponse20022.  # noqa: E501

        Server hostname.  # noqa: E501

        :return: The server_hostname of this InlineResponse20022.  # noqa: E501
        :rtype: object
        """
        return self._server_hostname

    @server_hostname.setter
    def server_hostname(self, server_hostname):
        """Sets the server_hostname of this InlineResponse20022.

        Server hostname.  # noqa: E501

        :param server_hostname: The server_hostname of this InlineResponse20022.  # noqa: E501
        :type: object
        """

        self._server_hostname = server_hostname

    @property
    def server_ip(self):
        """Gets the server_ip of this InlineResponse20022.  # noqa: E501

        Server main IP.  # noqa: E501

        :return: The server_ip of this InlineResponse20022.  # noqa: E501
        :rtype: object
        """
        return self._server_ip

    @server_ip.setter
    def server_ip(self, server_ip):
        """Sets the server_ip of this InlineResponse20022.

        Server main IP.  # noqa: E501

        :param server_ip: The server_ip of this InlineResponse20022.  # noqa: E501
        :type: object
        """

        self._server_ip = server_ip

    @property
    def id(self):
        """Gets the id of this InlineResponse20022.  # noqa: E501

        World account ID  # noqa: E501

        :return: The id of this InlineResponse20022.  # noqa: E501
        :rtype: object
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20022.

        World account ID  # noqa: E501

        :param id: The id of this InlineResponse20022.  # noqa: E501
        :type: object
        """

        self._id = id

    @property
    def username(self):
        """Gets the username of this InlineResponse20022.  # noqa: E501

        World account username.  # noqa: E501

        :return: The username of this InlineResponse20022.  # noqa: E501
        :rtype: object
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this InlineResponse20022.

        World account username.  # noqa: E501

        :param username: The username of this InlineResponse20022.  # noqa: E501
        :type: object
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this InlineResponse20022.  # noqa: E501

        World account password.  # noqa: E501

        :return: The password of this InlineResponse20022.  # noqa: E501
        :rtype: object
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this InlineResponse20022.

        World account password.  # noqa: E501

        :param password: The password of this InlineResponse20022.  # noqa: E501
        :type: object
        """

        self._password = password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20022, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20022):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
