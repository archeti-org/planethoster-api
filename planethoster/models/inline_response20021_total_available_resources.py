# coding: utf-8

"""
    PlanetHoster API

    | <a href=\"https://apidoc.planethoster.com/fr\">Version Fran√ßaise</a> ## Description The PlanetHoster API allows actions related to domain management and web hosting. ## Details - SSL only: we require that all requests be done over encrypted TLS/SSL connections. - Supported HTTP verbs are GET and POST. If your client does not support all HTTP verbs, you can override the verb with X-Http-Method-Override HTTP header. - Unless otherwise specified in the method documentation, all successful API calls return an **HTTP code 200** with a JSON object. - Errors are returned with an HTTP code 4XX or 5XX, a JSON object with properties \"error\" (an error message) and an \"error_code\" (optional, an integer). - Every string passed to and from the API needs to be UTF-8 encoded. - The API sends ETag headers and supports the If-None-Match header. - Unless otherwise specified, all API methods require authentication with api_user and api_key.  ## Authentication and whitelist 1. In order to be able to contact the API, you must whitelist your IPs. 2. API user and API key are required in the HTTP header.  Whitelisted IP and credentials can be found in the <a href=\"https://my.planethoster.com/domain-reseller\" target=\"_blank\">PlanetHoster Client Area / Reseller section</a>.  <SecurityDefinitions />   # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: tech@support.planethoster.info
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20021TotalAvailableResources(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu': 'object',
        'io': 'object',
        'mem': 'object'
    }

    attribute_map = {
        'cpu': 'cpu',
        'io': 'io',
        'mem': 'mem'
    }

    def __init__(self, cpu=None, io=None, mem=None):  # noqa: E501
        """InlineResponse20021TotalAvailableResources - a model defined in Swagger"""  # noqa: E501
        self._cpu = None
        self._io = None
        self._mem = None
        self.discriminator = None
        if cpu is not None:
            self.cpu = cpu
        if io is not None:
            self.io = io
        if mem is not None:
            self.mem = mem

    @property
    def cpu(self):
        """Gets the cpu of this InlineResponse20021TotalAvailableResources.  # noqa: E501

        The number of available CPU.  # noqa: E501

        :return: The cpu of this InlineResponse20021TotalAvailableResources.  # noqa: E501
        :rtype: object
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this InlineResponse20021TotalAvailableResources.

        The number of available CPU.  # noqa: E501

        :param cpu: The cpu of this InlineResponse20021TotalAvailableResources.  # noqa: E501
        :type: object
        """

        self._cpu = cpu

    @property
    def io(self):
        """Gets the io of this InlineResponse20021TotalAvailableResources.  # noqa: E501

        The number of available I/O.  # noqa: E501

        :return: The io of this InlineResponse20021TotalAvailableResources.  # noqa: E501
        :rtype: object
        """
        return self._io

    @io.setter
    def io(self, io):
        """Sets the io of this InlineResponse20021TotalAvailableResources.

        The number of available I/O.  # noqa: E501

        :param io: The io of this InlineResponse20021TotalAvailableResources.  # noqa: E501
        :type: object
        """

        self._io = io

    @property
    def mem(self):
        """Gets the mem of this InlineResponse20021TotalAvailableResources.  # noqa: E501

        The number of available memory.  # noqa: E501

        :return: The mem of this InlineResponse20021TotalAvailableResources.  # noqa: E501
        :rtype: object
        """
        return self._mem

    @mem.setter
    def mem(self, mem):
        """Sets the mem of this InlineResponse20021TotalAvailableResources.

        The number of available memory.  # noqa: E501

        :param mem: The mem of this InlineResponse20021TotalAvailableResources.  # noqa: E501
        :type: object
        """

        self._mem = mem

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20021TotalAvailableResources, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20021TotalAvailableResources):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
