# coding: utf-8

"""
    PlanetHoster API

    | <a href=\"https://apidoc.planethoster.com/fr\">Version Fran√ßaise</a> ## Description The PlanetHoster API allows actions related to domain management and web hosting. ## Details - SSL only: we require that all requests be done over encrypted TLS/SSL connections. - Supported HTTP verbs are GET and POST. If your client does not support all HTTP verbs, you can override the verb with X-Http-Method-Override HTTP header. - Unless otherwise specified in the method documentation, all successful API calls return an **HTTP code 200** with a JSON object. - Errors are returned with an HTTP code 4XX or 5XX, a JSON object with properties \"error\" (an error message) and an \"error_code\" (optional, an integer). - Every string passed to and from the API needs to be UTF-8 encoded. - The API sends ETag headers and supports the If-None-Match header. - Unless otherwise specified, all API methods require authentication with api_user and api_key.  ## Authentication and whitelist 1. In order to be able to contact the API, you must whitelist your IPs. 2. API user and API key are required in the HTTP header.  Whitelisted IP and credentials can be found in the <a href=\"https://my.planethoster.com/domain-reseller\" target=\"_blank\">PlanetHoster Client Area / Reseller section</a>.  <SecurityDefinitions />   # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: tech@support.planethoster.info
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from planethoster.api_client import ApiClient


class EmailApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def n0c_add_email(self, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Add  # noqa: E501

        Create a new email address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_add_email(x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param EmailAddBody body: Add email parameters.
        :return: InlineResponse20045
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.n0c_add_email_with_http_info(x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.n0c_add_email_with_http_info(x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def n0c_add_email_with_http_info(self, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Add  # noqa: E501

        Create a new email address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_add_email_with_http_info(x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param EmailAddBody body: Add email parameters.
        :return: InlineResponse20045
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_user', 'x_api_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method n0c_add_email" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `n0c_add_email`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `n0c_add_email`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/n0c-api/email/add', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20045',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def n0c_disable_auth(self, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Disable Authentication  # noqa: E501

        Disable email authentication.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_disable_auth(x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param AuthDisableBody body: Email authentication parameters.
        :return: InlineResponse20052
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.n0c_disable_auth_with_http_info(x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.n0c_disable_auth_with_http_info(x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def n0c_disable_auth_with_http_info(self, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Disable Authentication  # noqa: E501

        Disable email authentication.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_disable_auth_with_http_info(x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param AuthDisableBody body: Email authentication parameters.
        :return: InlineResponse20052
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_user', 'x_api_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method n0c_disable_auth" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `n0c_disable_auth`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `n0c_disable_auth`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/n0c-api/email/auth/disable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20052',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def n0c_email_auth(self, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Authentication  # noqa: E501

        List email authentication.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_email_auth(x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param EmailRemoveBody body: Email authentication parameters.
        :return: InlineResponse20050
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.n0c_email_auth_with_http_info(x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.n0c_email_auth_with_http_info(x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def n0c_email_auth_with_http_info(self, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Authentication  # noqa: E501

        List email authentication.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_email_auth_with_http_info(x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param EmailRemoveBody body: Email authentication parameters.
        :return: InlineResponse20050
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_user', 'x_api_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method n0c_email_auth" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `n0c_email_auth`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `n0c_email_auth`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/n0c-api/email/auths', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20050',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def n0c_email_change_password(self, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Change password  # noqa: E501

        Change the password of an email account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_email_change_password(x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param EmailChangepasswordBody body: Change the parameters of the password.
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.n0c_email_change_password_with_http_info(x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.n0c_email_change_password_with_http_info(x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def n0c_email_change_password_with_http_info(self, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Change password  # noqa: E501

        Change the password of an email account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_email_change_password_with_http_info(x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param EmailChangepasswordBody body: Change the parameters of the password.
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_user', 'x_api_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method n0c_email_change_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `n0c_email_change_password`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `n0c_email_change_password`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/n0c-api/email/change-password', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20047',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def n0c_email_change_quota(self, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Change quota  # noqa: E501

        Change quota of an email account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_email_change_quota(x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param EmailChangequotaBody body: Change quota parameters.
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.n0c_email_change_quota_with_http_info(x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.n0c_email_change_quota_with_http_info(x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def n0c_email_change_quota_with_http_info(self, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Change quota  # noqa: E501

        Change quota of an email account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_email_change_quota_with_http_info(x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param EmailChangequotaBody body: Change quota parameters.
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_user', 'x_api_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method n0c_email_change_quota" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `n0c_email_change_quota`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `n0c_email_change_quota`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/n0c-api/email/change-quota', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20047',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def n0c_emails(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Emails  # noqa: E501

        Get all account emails.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_emails(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainRedirectionsBody body: World account ID parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20044
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.n0c_emails_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.n0c_emails_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def n0c_emails_with_http_info(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Emails  # noqa: E501

        Get all account emails.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_emails_with_http_info(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainRedirectionsBody body: World account ID parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20044
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_user', 'x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method n0c_emails" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `n0c_emails`")  # noqa: E501
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `n0c_emails`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `n0c_emails`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/n0c-api/emails', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20044',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def n0c_enable_auth(self, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Enable Authentication  # noqa: E501

        Enable email authentication.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_enable_auth(x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param AuthEnableBody body: Email authentication parameters.
        :return: InlineResponse20051
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.n0c_enable_auth_with_http_info(x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.n0c_enable_auth_with_http_info(x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def n0c_enable_auth_with_http_info(self, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Enable Authentication  # noqa: E501

        Enable email authentication.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_enable_auth_with_http_info(x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param AuthEnableBody body: Email authentication parameters.
        :return: InlineResponse20051
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_user', 'x_api_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method n0c_enable_auth" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `n0c_enable_auth`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `n0c_enable_auth`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/n0c-api/email/auth/enable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20051',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def n0c_remove_email(self, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Remove  # noqa: E501

        Remove an email address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_remove_email(x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param EmailRemoveBody body: Remove email parameters.
        :return: InlineResponse20046
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.n0c_remove_email_with_http_info(x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.n0c_remove_email_with_http_info(x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def n0c_remove_email_with_http_info(self, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Remove  # noqa: E501

        Remove an email address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_remove_email_with_http_info(x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param EmailRemoveBody body: Remove email parameters.
        :return: InlineResponse20046
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_user', 'x_api_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method n0c_remove_email" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `n0c_remove_email`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `n0c_remove_email`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/n0c-api/email/remove', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20046',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def n0c_suspend_emails(self, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Suspend emails  # noqa: E501

        Suspend multiple email addresses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_suspend_emails(x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param EmailSuspendBody body: Suspend emails parameters.
        :return: InlineResponse20048
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.n0c_suspend_emails_with_http_info(x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.n0c_suspend_emails_with_http_info(x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def n0c_suspend_emails_with_http_info(self, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Suspend emails  # noqa: E501

        Suspend multiple email addresses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_suspend_emails_with_http_info(x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param EmailSuspendBody body: Suspend emails parameters.
        :return: InlineResponse20048
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_user', 'x_api_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method n0c_suspend_emails" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `n0c_suspend_emails`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `n0c_suspend_emails`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/n0c-api/email/suspend', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20048',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def n0c_unsuspend_emails(self, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Unsuspend emails  # noqa: E501

        Unsuspend multiple email addresses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_unsuspend_emails(x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param EmailUnsuspendBody body: Unsuspend emails parameters.
        :return: InlineResponse20049
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.n0c_unsuspend_emails_with_http_info(x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.n0c_unsuspend_emails_with_http_info(x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def n0c_unsuspend_emails_with_http_info(self, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Unsuspend emails  # noqa: E501

        Unsuspend multiple email addresses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_unsuspend_emails_with_http_info(x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param EmailUnsuspendBody body: Unsuspend emails parameters.
        :return: InlineResponse20049
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_user', 'x_api_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method n0c_unsuspend_emails" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `n0c_unsuspend_emails`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `n0c_unsuspend_emails`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/n0c-api/email/unsuspend', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20049',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
