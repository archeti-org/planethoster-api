# coding: utf-8

"""
    PlanetHoster API

    | <a href=\"https://apidoc.planethoster.com/fr\">Version Fran√ßaise</a> ## Description The PlanetHoster API allows actions related to domain management and web hosting. ## Details - SSL only: we require that all requests be done over encrypted TLS/SSL connections. - Supported HTTP verbs are GET and POST. If your client does not support all HTTP verbs, you can override the verb with X-Http-Method-Override HTTP header. - Unless otherwise specified in the method documentation, all successful API calls return an **HTTP code 200** with a JSON object. - Errors are returned with an HTTP code 4XX or 5XX, a JSON object with properties \"error\" (an error message) and an \"error_code\" (optional, an integer). - Every string passed to and from the API needs to be UTF-8 encoded. - The API sends ETag headers and supports the If-None-Match header. - Unless otherwise specified, all API methods require authentication with api_user and api_key.  ## Authentication and whitelist 1. In order to be able to contact the API, you must whitelist your IPs. 2. API user and API key are required in the HTTP header.  Whitelisted IP and credentials can be found in the <a href=\"https://my.planethoster.com/domain-reseller\" target=\"_blank\">PlanetHoster Client Area / Reseller section</a>.  <SecurityDefinitions />   # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: tech@support.planethoster.info
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from planethoster.api_client import ApiClient


class ResellerAPIApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def account_info(self, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Account info  # noqa: E501

        Return information pertinent to your reseller account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_info(x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_info_with_http_info(x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.account_info_with_http_info(x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def account_info_with_http_info(self, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Account info  # noqa: E501

        Return information pertinent to your reseller account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_info_with_http_info(x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_user', 'x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `account_info`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `account_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/reseller-api/account-info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def check_availability(self, x_api_user, x_api_key, sld, tld, **kwargs):  # noqa: E501
        """Check domain availability  # noqa: E501

        Checks whether a domain name is available to register or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_availability(x_api_user, x_api_key, sld, tld, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param object sld: Domain name without the Top-Level Domain (TLD). (required)
        :param object tld: TLD without the leading period. (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.check_availability_with_http_info(x_api_user, x_api_key, sld, tld, **kwargs)  # noqa: E501
        else:
            (data) = self.check_availability_with_http_info(x_api_user, x_api_key, sld, tld, **kwargs)  # noqa: E501
            return data

    def check_availability_with_http_info(self, x_api_user, x_api_key, sld, tld, **kwargs):  # noqa: E501
        """Check domain availability  # noqa: E501

        Checks whether a domain name is available to register or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_availability_with_http_info(x_api_user, x_api_key, sld, tld, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param object sld: Domain name without the Top-Level Domain (TLD). (required)
        :param object tld: TLD without the leading period. (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_user', 'x_api_key', 'sld', 'tld']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method check_availability" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `check_availability`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `check_availability`")  # noqa: E501
        # verify the required parameter 'sld' is set
        if ('sld' not in params or
                params['sld'] is None):
            raise ValueError("Missing the required parameter `sld` when calling `check_availability`")  # noqa: E501
        # verify the required parameter 'tld' is set
        if ('tld' not in params or
                params['tld'] is None):
            raise ValueError("Missing the required parameter `tld` when calling `check_availability`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sld' in params:
            query_params.append(('sld', params['sld']))  # noqa: E501
        if 'tld' in params:
            query_params.append(('tld', params['tld']))  # noqa: E501

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/reseller-api/check-availability', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_ph_dns_zone(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Delete zone  # noqa: E501

        Deletes the DNS zone on the PlanetHoster DNS servers for the given domain.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ph_dns_zone(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResellerapiDeletephdnszoneBody body: Delete zone parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_ph_dns_zone_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_ph_dns_zone_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def delete_ph_dns_zone_with_http_info(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Delete zone  # noqa: E501

        Deletes the DNS zone on the PlanetHoster DNS servers for the given domain.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ph_dns_zone_with_http_info(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResellerapiDeletephdnszoneBody body: Delete zone parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_user', 'x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ph_dns_zone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_ph_dns_zone`")  # noqa: E501
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `delete_ph_dns_zone`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `delete_ph_dns_zone`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/reseller-api/delete-ph-dns-zone', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def domain_info(self, x_api_user, x_api_key, sld, tld, **kwargs):  # noqa: E501
        """Domain information  # noqa: E501

        Retrieve information for a domain you successfully registered or for which you created a transfer order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.domain_info(x_api_user, x_api_key, sld, tld, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param object sld: Domain name without the Top-Level Domain (TLD). (required)
        :param object tld: TLD without the leading period. (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.domain_info_with_http_info(x_api_user, x_api_key, sld, tld, **kwargs)  # noqa: E501
        else:
            (data) = self.domain_info_with_http_info(x_api_user, x_api_key, sld, tld, **kwargs)  # noqa: E501
            return data

    def domain_info_with_http_info(self, x_api_user, x_api_key, sld, tld, **kwargs):  # noqa: E501
        """Domain information  # noqa: E501

        Retrieve information for a domain you successfully registered or for which you created a transfer order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.domain_info_with_http_info(x_api_user, x_api_key, sld, tld, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param object sld: Domain name without the Top-Level Domain (TLD). (required)
        :param object tld: TLD without the leading period. (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_user', 'x_api_key', 'sld', 'tld']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method domain_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `domain_info`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `domain_info`")  # noqa: E501
        # verify the required parameter 'sld' is set
        if ('sld' not in params or
                params['sld'] is None):
            raise ValueError("Missing the required parameter `sld` when calling `domain_info`")  # noqa: E501
        # verify the required parameter 'tld' is set
        if ('tld' not in params or
                params['tld'] is None):
            raise ValueError("Missing the required parameter `tld` when calling `domain_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sld' in params:
            query_params.append(('sld', params['sld']))  # noqa: E501
        if 'tld' in params:
            query_params.append(('tld', params['tld']))  # noqa: E501

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/reseller-api/domain-info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def email_epp_code(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Email epp code  # noqa: E501

        Email to the domain name registrant the EPP code (also called Auth Info) for the given domain.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.email_epp_code(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResellerapiDeletephdnszoneBody body: EPP code request parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.email_epp_code_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.email_epp_code_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def email_epp_code_with_http_info(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Email epp code  # noqa: E501

        Email to the domain name registrant the EPP code (also called Auth Info) for the given domain.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.email_epp_code_with_http_info(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResellerapiDeletephdnszoneBody body: EPP code request parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_user', 'x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method email_epp_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `email_epp_code`")  # noqa: E501
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `email_epp_code`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `email_epp_code`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/reseller-api/email-epp-code', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20014',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_contact_details(self, x_api_user, x_api_key, sld, tld, **kwargs):  # noqa: E501
        """Contact details  # noqa: E501

        Returns the contact information (WHOIS information) for the active domain name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_contact_details(x_api_user, x_api_key, sld, tld, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param object sld: Domain name without the Top-Level Domain (TLD). (required)
        :param object tld: TLD without the leading period. (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_contact_details_with_http_info(x_api_user, x_api_key, sld, tld, **kwargs)  # noqa: E501
        else:
            (data) = self.get_contact_details_with_http_info(x_api_user, x_api_key, sld, tld, **kwargs)  # noqa: E501
            return data

    def get_contact_details_with_http_info(self, x_api_user, x_api_key, sld, tld, **kwargs):  # noqa: E501
        """Contact details  # noqa: E501

        Returns the contact information (WHOIS information) for the active domain name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_contact_details_with_http_info(x_api_user, x_api_key, sld, tld, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param object sld: Domain name without the Top-Level Domain (TLD). (required)
        :param object tld: TLD without the leading period. (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_user', 'x_api_key', 'sld', 'tld']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_contact_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `get_contact_details`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_contact_details`")  # noqa: E501
        # verify the required parameter 'sld' is set
        if ('sld' not in params or
                params['sld'] is None):
            raise ValueError("Missing the required parameter `sld` when calling `get_contact_details`")  # noqa: E501
        # verify the required parameter 'tld' is set
        if ('tld' not in params or
                params['tld'] is None):
            raise ValueError("Missing the required parameter `tld` when calling `get_contact_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sld' in params:
            query_params.append(('sld', params['sld']))  # noqa: E501
        if 'tld' in params:
            query_params.append(('tld', params['tld']))  # noqa: E501

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/reseller-api/get-contact-details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_nameservers(self, x_api_user, x_api_key, sld, tld, **kwargs):  # noqa: E501
        """Get nameservers  # noqa: E501

        Returns the nameservers for a registered domain name.   *There must be at least two existing nameservers associated with a domain name.*   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_nameservers(x_api_user, x_api_key, sld, tld, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param object sld: Domain name without the Top-Level Domain (TLD). (required)
        :param object tld: TLD without the leading period. (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_nameservers_with_http_info(x_api_user, x_api_key, sld, tld, **kwargs)  # noqa: E501
        else:
            (data) = self.get_nameservers_with_http_info(x_api_user, x_api_key, sld, tld, **kwargs)  # noqa: E501
            return data

    def get_nameservers_with_http_info(self, x_api_user, x_api_key, sld, tld, **kwargs):  # noqa: E501
        """Get nameservers  # noqa: E501

        Returns the nameservers for a registered domain name.   *There must be at least two existing nameservers associated with a domain name.*   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_nameservers_with_http_info(x_api_user, x_api_key, sld, tld, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param object sld: Domain name without the Top-Level Domain (TLD). (required)
        :param object tld: TLD without the leading period. (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_user', 'x_api_key', 'sld', 'tld']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_nameservers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `get_nameservers`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_nameservers`")  # noqa: E501
        # verify the required parameter 'sld' is set
        if ('sld' not in params or
                params['sld'] is None):
            raise ValueError("Missing the required parameter `sld` when calling `get_nameservers`")  # noqa: E501
        # verify the required parameter 'tld' is set
        if ('tld' not in params or
                params['tld'] is None):
            raise ValueError("Missing the required parameter `tld` when calling `get_nameservers`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sld' in params:
            query_params.append(('sld', params['sld']))  # noqa: E501
        if 'tld' in params:
            query_params.append(('tld', params['tld']))  # noqa: E501

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/reseller-api/get-nameservers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ph_dns_records(self, x_api_user, x_api_key, sld, tld, **kwargs):  # noqa: E501
        """Get dns records  # noqa: E501

        Retrieves the DNS records for the active domain name registered with PlanetHoster that has at least one PlanetHoster nameserver.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ph_dns_records(x_api_user, x_api_key, sld, tld, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param object sld: Domain name without the Top-Level Domain (TLD). (required)
        :param object tld: TLD without the leading period. (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ph_dns_records_with_http_info(x_api_user, x_api_key, sld, tld, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ph_dns_records_with_http_info(x_api_user, x_api_key, sld, tld, **kwargs)  # noqa: E501
            return data

    def get_ph_dns_records_with_http_info(self, x_api_user, x_api_key, sld, tld, **kwargs):  # noqa: E501
        """Get dns records  # noqa: E501

        Retrieves the DNS records for the active domain name registered with PlanetHoster that has at least one PlanetHoster nameserver.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ph_dns_records_with_http_info(x_api_user, x_api_key, sld, tld, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param object sld: Domain name without the Top-Level Domain (TLD). (required)
        :param object tld: TLD without the leading period. (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_user', 'x_api_key', 'sld', 'tld']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ph_dns_records" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `get_ph_dns_records`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_ph_dns_records`")  # noqa: E501
        # verify the required parameter 'sld' is set
        if ('sld' not in params or
                params['sld'] is None):
            raise ValueError("Missing the required parameter `sld` when calling `get_ph_dns_records`")  # noqa: E501
        # verify the required parameter 'tld' is set
        if ('tld' not in params or
                params['tld'] is None):
            raise ValueError("Missing the required parameter `tld` when calling `get_ph_dns_records`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sld' in params:
            query_params.append(('sld', params['sld']))  # noqa: E501
        if 'tld' in params:
            query_params.append(('tld', params['tld']))  # noqa: E501

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/reseller-api/get-ph-dns-records', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_registrar_lock(self, x_api_user, x_api_key, sld, tld, **kwargs):  # noqa: E501
        """Get registrar lock  # noqa: E501

        Get the lock status of a registered domain name.   *If a domain is locked, it means that it cannot be transferred.*   See [/save-registrar-lock](#operation/saveRegistrarLock) for more info.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registrar_lock(x_api_user, x_api_key, sld, tld, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param object sld: Domain name without the Top-Level Domain (TLD). (required)
        :param object tld: TLD without the leading period. (required)
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_registrar_lock_with_http_info(x_api_user, x_api_key, sld, tld, **kwargs)  # noqa: E501
        else:
            (data) = self.get_registrar_lock_with_http_info(x_api_user, x_api_key, sld, tld, **kwargs)  # noqa: E501
            return data

    def get_registrar_lock_with_http_info(self, x_api_user, x_api_key, sld, tld, **kwargs):  # noqa: E501
        """Get registrar lock  # noqa: E501

        Get the lock status of a registered domain name.   *If a domain is locked, it means that it cannot be transferred.*   See [/save-registrar-lock](#operation/saveRegistrarLock) for more info.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registrar_lock_with_http_info(x_api_user, x_api_key, sld, tld, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param object sld: Domain name without the Top-Level Domain (TLD). (required)
        :param object tld: TLD without the leading period. (required)
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_user', 'x_api_key', 'sld', 'tld']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registrar_lock" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `get_registrar_lock`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_registrar_lock`")  # noqa: E501
        # verify the required parameter 'sld' is set
        if ('sld' not in params or
                params['sld'] is None):
            raise ValueError("Missing the required parameter `sld` when calling `get_registrar_lock`")  # noqa: E501
        # verify the required parameter 'tld' is set
        if ('tld' not in params or
                params['tld'] is None):
            raise ValueError("Missing the required parameter `tld` when calling `get_registrar_lock`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sld' in params:
            query_params.append(('sld', params['sld']))  # noqa: E501
        if 'tld' in params:
            query_params.append(('tld', params['tld']))  # noqa: E501

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/reseller-api/get-registrar-lock', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def register_domain(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Register domain  # noqa: E501

        Attempts to register a domain name for 1 to 10 years.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_domain(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResellerapiRegisterdomainBody body: Register parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param object x_api_sandbox: Sandbox Environments set 1 to activate.
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.register_domain_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.register_domain_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def register_domain_with_http_info(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Register domain  # noqa: E501

        Attempts to register a domain name for 1 to 10 years.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_domain_with_http_info(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResellerapiRegisterdomainBody body: Register parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param object x_api_sandbox: Sandbox Environments set 1 to activate.
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_user', 'x_api_key', 'x_api_sandbox']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_domain" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `register_domain`")  # noqa: E501
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `register_domain`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `register_domain`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501
        if 'x_api_sandbox' in params:
            header_params['X-API-SANDBOX'] = params['x_api_sandbox']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/reseller-api/register-domain', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def renew_domain(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Renew domain  # noqa: E501

        Renew an already active domain name for 1-10 years.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.renew_domain(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResellerapiRenewdomainBody body: Renewal parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.renew_domain_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.renew_domain_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def renew_domain_with_http_info(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Renew domain  # noqa: E501

        Renew an already active domain name for 1-10 years.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.renew_domain_with_http_info(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResellerapiRenewdomainBody body: Renewal parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_user', 'x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method renew_domain" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `renew_domain`")  # noqa: E501
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `renew_domain`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `renew_domain`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/reseller-api/renew-domain', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20016',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def save_contact_details(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Save contact details  # noqa: E501

        Saves the contact information (WHOIS information) for the given active domain name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_contact_details(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResellerapiSavecontactdetailsBody body: Contact parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.save_contact_details_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.save_contact_details_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def save_contact_details_with_http_info(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Save contact details  # noqa: E501

        Saves the contact information (WHOIS information) for the given active domain name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_contact_details_with_http_info(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResellerapiSavecontactdetailsBody body: Contact parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_user', 'x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_contact_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `save_contact_details`")  # noqa: E501
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `save_contact_details`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `save_contact_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/reseller-api/save-contact-details', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def save_namervers(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Save nameservers  # noqa: E501

        Update the nameservers associated with your domain.   *The nameservers must exist and be valid nameservers.*   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_namervers(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResellerapiSavenameserversBody body: Nameservers parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.save_namervers_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.save_namervers_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def save_namervers_with_http_info(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Save nameservers  # noqa: E501

        Update the nameservers associated with your domain.   *The nameservers must exist and be valid nameservers.*   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_namervers_with_http_info(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResellerapiSavenameserversBody body: Nameservers parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_user', 'x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_namervers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `save_namervers`")  # noqa: E501
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `save_namervers`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `save_namervers`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/reseller-api/save-nameservers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def save_ph_dns_records(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Save dns records  # noqa: E501

        Saves the DNS records for the active domain name registered with PlanetHoster that has at least one PlanetHoster nameserver.   If the DNS zone does not yet exist on PlanetHoster nameservers, it is created.  **Note that this call only work for domain that use PlanetHoster DNS. nsa.n0c.com, nsb.n0c.com, nsc.n0c.com**   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_ph_dns_records(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResellerapiSavephdnsrecordsBody body: Records parameters.  
**You can add more records by incrementing the number at the end of the parameters key.**
 (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.save_ph_dns_records_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.save_ph_dns_records_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def save_ph_dns_records_with_http_info(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Save dns records  # noqa: E501

        Saves the DNS records for the active domain name registered with PlanetHoster that has at least one PlanetHoster nameserver.   If the DNS zone does not yet exist on PlanetHoster nameservers, it is created.  **Note that this call only work for domain that use PlanetHoster DNS. nsa.n0c.com, nsb.n0c.com, nsc.n0c.com**   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_ph_dns_records_with_http_info(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResellerapiSavephdnsrecordsBody body: Records parameters.  
**You can add more records by incrementing the number at the end of the parameters key.**
 (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_user', 'x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_ph_dns_records" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `save_ph_dns_records`")  # noqa: E501
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `save_ph_dns_records`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `save_ph_dns_records`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/reseller-api/save-ph-dns-records', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def save_registrar_lock(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Save registrar lock  # noqa: E501

        Lock or unlock a registered and active domain name.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_registrar_lock(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResellerapiSaveregistrarlockBody body: Nameservers parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.save_registrar_lock_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.save_registrar_lock_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def save_registrar_lock_with_http_info(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Save registrar lock  # noqa: E501

        Lock or unlock a registered and active domain name.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_registrar_lock_with_http_info(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResellerapiSaveregistrarlockBody body: Nameservers parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_user', 'x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_registrar_lock" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `save_registrar_lock`")  # noqa: E501
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `save_registrar_lock`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `save_registrar_lock`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/reseller-api/save-registrar-lock', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_connection(self, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Tests the connection  # noqa: E501

        Tests the connection to the domain reseller API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_connection(x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_connection_with_http_info(x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.test_connection_with_http_info(x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def test_connection_with_http_info(self, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Tests the connection  # noqa: E501

        Tests the connection to the domain reseller API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_connection_with_http_info(x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_user', 'x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_connection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `test_connection`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `test_connection`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/reseller-api/test-connection', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tld_prices(self, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Tld prices  # noqa: E501

        Returns domain name prices for registration, renewal and transfer. It also returns whether or not each TLD sold by PlanetHoster supports WHOIS ID protection, and whether it requires an EPP code for domain transfer or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tld_prices(x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tld_prices_with_http_info(x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.tld_prices_with_http_info(x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def tld_prices_with_http_info(self, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Tld prices  # noqa: E501

        Returns domain name prices for registration, renewal and transfer. It also returns whether or not each TLD sold by PlanetHoster supports WHOIS ID protection, and whether it requires an EPP code for domain transfer or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tld_prices_with_http_info(x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_user', 'x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tld_prices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `tld_prices`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `tld_prices`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/reseller-api/tld-prices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def transfer_domain(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Transfer domain  # noqa: E501

        Transfer a domain name from your current registrar to PlanetHoster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transfer_domain(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResellerapiTransfertdomainBody body: Transfer parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.transfer_domain_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.transfer_domain_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def transfer_domain_with_http_info(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Transfer domain  # noqa: E501

        Transfer a domain name from your current registrar to PlanetHoster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transfer_domain_with_http_info(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResellerapiTransfertdomainBody body: Transfer parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_user', 'x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transfer_domain" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `transfer_domain`")  # noqa: E501
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `transfer_domain`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `transfer_domain`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/reseller-api/transfert-domain', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20017',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
