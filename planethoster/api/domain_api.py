# coding: utf-8

"""
    PlanetHoster API

    | <a href=\"https://apidoc.planethoster.com/fr\">Version Fran√ßaise</a> ## Description The PlanetHoster API allows actions related to domain management and web hosting. ## Details - SSL only: we require that all requests be done over encrypted TLS/SSL connections. - Supported HTTP verbs are GET and POST. If your client does not support all HTTP verbs, you can override the verb with X-Http-Method-Override HTTP header. - Unless otherwise specified in the method documentation, all successful API calls return an **HTTP code 200** with a JSON object. - Errors are returned with an HTTP code 4XX or 5XX, a JSON object with properties \"error\" (an error message) and an \"error_code\" (optional, an integer). - Every string passed to and from the API needs to be UTF-8 encoded. - The API sends ETag headers and supports the If-None-Match header. - Unless otherwise specified, all API methods require authentication with api_user and api_key.  ## Authentication and whitelist 1. In order to be able to contact the API, you must whitelist your IPs. 2. API user and API key are required in the HTTP header.  Whitelisted IP and credentials can be found in the <a href=\"https://my.planethoster.com/domain-reseller\" target=\"_blank\">PlanetHoster Client Area / Reseller section</a>.  <SecurityDefinitions />   # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: tech@support.planethoster.info
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from planethoster.api_client import ApiClient


class DomainApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def n0c_add_domain(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Add  # noqa: E501

        Add a domain to the World account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_add_domain(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainAddBody body: Add domain parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20033
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.n0c_add_domain_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.n0c_add_domain_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def n0c_add_domain_with_http_info(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Add  # noqa: E501

        Add a domain to the World account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_add_domain_with_http_info(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainAddBody body: Add domain parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20033
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_user', 'x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method n0c_add_domain" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `n0c_add_domain`")  # noqa: E501
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `n0c_add_domain`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `n0c_add_domain`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/n0c-api/domain/add', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20033',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def n0c_add_sub_domain(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Add sub-domain  # noqa: E501

        Add a sub-domain to the World account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_add_sub_domain(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainAddsubdomainBody body: Add sub-domain parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20035
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.n0c_add_sub_domain_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.n0c_add_sub_domain_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def n0c_add_sub_domain_with_http_info(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Add sub-domain  # noqa: E501

        Add a sub-domain to the World account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_add_sub_domain_with_http_info(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainAddsubdomainBody body: Add sub-domain parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20035
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_user', 'x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method n0c_add_sub_domain" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `n0c_add_sub_domain`")  # noqa: E501
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `n0c_add_sub_domain`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `n0c_add_sub_domain`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/n0c-api/domain/add-sub-domain', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20035',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def n0c_change_doc_root(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Change doc-root  # noqa: E501

        Unsuspend one or multiple domains.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_change_doc_root(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainChangedocrootBody body: Unsuspend domains parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20035
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.n0c_change_doc_root_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.n0c_change_doc_root_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def n0c_change_doc_root_with_http_info(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Change doc-root  # noqa: E501

        Unsuspend one or multiple domains.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_change_doc_root_with_http_info(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainChangedocrootBody body: Unsuspend domains parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20035
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_user', 'x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method n0c_change_doc_root" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `n0c_change_doc_root`")  # noqa: E501
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `n0c_change_doc_root`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `n0c_change_doc_root`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/n0c-api/domain/change-doc-root', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20035',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def n0c_delete_redirection(self, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Delete redirection  # noqa: E501

        Delete redirection for a domain.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_delete_redirection(x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param DomainRemoveBody body: Delete redirection parameters.
        :return: InlineResponse20040
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.n0c_delete_redirection_with_http_info(x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.n0c_delete_redirection_with_http_info(x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def n0c_delete_redirection_with_http_info(self, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Delete redirection  # noqa: E501

        Delete redirection for a domain.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_delete_redirection_with_http_info(x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param DomainRemoveBody body: Delete redirection parameters.
        :return: InlineResponse20040
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_user', 'x_api_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method n0c_delete_redirection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `n0c_delete_redirection`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `n0c_delete_redirection`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/n0c-api/domain/delete-redirection', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20040',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def n0c_domain_waf_logs(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """WAF logs  # noqa: E501

        Get domain WAF logs. What is a [Web App Firewall](https://kb.n0c.com/en/knowledge-base/activating-and-deactivating-the-waf-with-n0c/)?   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_domain_waf_logs(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainRemoveBody body: Get WAF logs parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20041
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.n0c_domain_waf_logs_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.n0c_domain_waf_logs_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def n0c_domain_waf_logs_with_http_info(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """WAF logs  # noqa: E501

        Get domain WAF logs. What is a [Web App Firewall](https://kb.n0c.com/en/knowledge-base/activating-and-deactivating-the-waf-with-n0c/)?   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_domain_waf_logs_with_http_info(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainRemoveBody body: Get WAF logs parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20041
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_user', 'x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method n0c_domain_waf_logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `n0c_domain_waf_logs`")  # noqa: E501
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `n0c_domain_waf_logs`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `n0c_domain_waf_logs`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/n0c-api/domain/waf-logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20041',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def n0c_domain_waf_rules(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """WAF rules  # noqa: E501

        Get the domain WAF rules.   What is a [Web App Firewall](https://kb.n0c.com/en/knowledge-base/activating-and-deactivating-the-waf-with-n0c/)?   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_domain_waf_rules(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainRemoveBody body: Get WAF rules parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20042
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.n0c_domain_waf_rules_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.n0c_domain_waf_rules_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def n0c_domain_waf_rules_with_http_info(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """WAF rules  # noqa: E501

        Get the domain WAF rules.   What is a [Web App Firewall](https://kb.n0c.com/en/knowledge-base/activating-and-deactivating-the-waf-with-n0c/)?   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_domain_waf_rules_with_http_info(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainRemoveBody body: Get WAF rules parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20042
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_user', 'x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method n0c_domain_waf_rules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `n0c_domain_waf_rules`")  # noqa: E501
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `n0c_domain_waf_rules`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `n0c_domain_waf_rules`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/n0c-api/domain/waf-rules', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20042',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def n0c_domains(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Domains  # noqa: E501

        Get all domains of the account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_domains(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserTempdomainBody body: World account ID parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20032
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.n0c_domains_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.n0c_domains_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def n0c_domains_with_http_info(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Domains  # noqa: E501

        Get all domains of the account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_domains_with_http_info(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserTempdomainBody body: World account ID parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20032
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_user', 'x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method n0c_domains" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `n0c_domains`")  # noqa: E501
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `n0c_domains`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `n0c_domains`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/n0c-api/domains', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20032',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def n0c_redirections(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Redirections  # noqa: E501

        Get domain redirections.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_redirections(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainRedirectionsBody body: World account ID parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20038
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.n0c_redirections_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.n0c_redirections_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def n0c_redirections_with_http_info(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Redirections  # noqa: E501

        Get domain redirections.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_redirections_with_http_info(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainRedirectionsBody body: World account ID parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20038
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_user', 'x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method n0c_redirections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `n0c_redirections`")  # noqa: E501
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `n0c_redirections`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `n0c_redirections`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/n0c-api/domain/redirections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20038',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def n0c_remove_domain(self, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Remove  # noqa: E501

        Remove the domain from the World account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_remove_domain(x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param DomainRemoveBody body: Remove domain parameters.
        :return: InlineResponse20034
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.n0c_remove_domain_with_http_info(x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.n0c_remove_domain_with_http_info(x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def n0c_remove_domain_with_http_info(self, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Remove  # noqa: E501

        Remove the domain from the World account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_remove_domain_with_http_info(x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :param DomainRemoveBody body: Remove domain parameters.
        :return: InlineResponse20034
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_user', 'x_api_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method n0c_remove_domain" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `n0c_remove_domain`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `n0c_remove_domain`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/n0c-api/domain/remove', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20034',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def n0c_set_external_redirection(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """External redirection  # noqa: E501

        Redirection that will force HTTPS or www, for example.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_set_external_redirection(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainExternalredirectionBody body: External redirection parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20039
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.n0c_set_external_redirection_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.n0c_set_external_redirection_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def n0c_set_external_redirection_with_http_info(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """External redirection  # noqa: E501

        Redirection that will force HTTPS or www, for example.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_set_external_redirection_with_http_info(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainExternalredirectionBody body: External redirection parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20039
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_user', 'x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method n0c_set_external_redirection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `n0c_set_external_redirection`")  # noqa: E501
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `n0c_set_external_redirection`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `n0c_set_external_redirection`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/n0c-api/domain/external-redirection', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20039',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def n0c_set_rediction(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Internal redirection  # noqa: E501

        Redirection that will force HTTPS or www, for example.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_set_rediction(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainRedirectionBody body: Internal redirection parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20039
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.n0c_set_rediction_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.n0c_set_rediction_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def n0c_set_rediction_with_http_info(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Internal redirection  # noqa: E501

        Redirection that will force HTTPS or www, for example.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_set_rediction_with_http_info(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainRedirectionBody body: Internal redirection parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20039
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_user', 'x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method n0c_set_rediction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `n0c_set_rediction`")  # noqa: E501
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `n0c_set_rediction`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `n0c_set_rediction`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/n0c-api/domain/redirection', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20039',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def n0c_suspend_domain(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Suspend domains  # noqa: E501

        Suspend one or multiple domains.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_suspend_domain(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainSuspendBody body: Suspend domains parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20036
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.n0c_suspend_domain_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.n0c_suspend_domain_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def n0c_suspend_domain_with_http_info(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Suspend domains  # noqa: E501

        Suspend one or multiple domains.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_suspend_domain_with_http_info(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainSuspendBody body: Suspend domains parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20036
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_user', 'x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method n0c_suspend_domain" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `n0c_suspend_domain`")  # noqa: E501
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `n0c_suspend_domain`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `n0c_suspend_domain`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/n0c-api/domain/suspend', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20036',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def n0c_unsuspend_domain(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Unsuspend domains  # noqa: E501

        Unsuspend one or multiple domains.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_unsuspend_domain(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainUnsuspendBody body: Unsuspend domains parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20037
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.n0c_unsuspend_domain_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.n0c_unsuspend_domain_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def n0c_unsuspend_domain_with_http_info(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Unsuspend domains  # noqa: E501

        Unsuspend one or multiple domains.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_unsuspend_domain_with_http_info(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainUnsuspendBody body: Unsuspend domains parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20037
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_user', 'x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method n0c_unsuspend_domain" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `n0c_unsuspend_domain`")  # noqa: E501
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `n0c_unsuspend_domain`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `n0c_unsuspend_domain`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/n0c-api/domain/unsuspend', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20037',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def n0c_update_waf_rules(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Update waf rules  # noqa: E501

        Update WAF rules for the domain.   What is a [Web App Firewall](https://kb.n0c.com/en/knowledge-base/activating-and-deactivating-the-waf-with-n0c/)?   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_update_waf_rules(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainUpdatewafrulesBody body: Get WAF rules parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20043
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.n0c_update_waf_rules_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.n0c_update_waf_rules_with_http_info(body, x_api_user, x_api_key, **kwargs)  # noqa: E501
            return data

    def n0c_update_waf_rules_with_http_info(self, body, x_api_user, x_api_key, **kwargs):  # noqa: E501
        """Update waf rules  # noqa: E501

        Update WAF rules for the domain.   What is a [Web App Firewall](https://kb.n0c.com/en/knowledge-base/activating-and-deactivating-the-waf-with-n0c/)?   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.n0c_update_waf_rules_with_http_info(body, x_api_user, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainUpdatewafrulesBody body: Get WAF rules parameters. (required)
        :param object x_api_user: API user provided in the client area. (required)
        :param object x_api_key: API key provided in the client area. (required)
        :return: InlineResponse20043
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_user', 'x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method n0c_update_waf_rules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `n0c_update_waf_rules`")  # noqa: E501
        # verify the required parameter 'x_api_user' is set
        if ('x_api_user' not in params or
                params['x_api_user'] is None):
            raise ValueError("Missing the required parameter `x_api_user` when calling `n0c_update_waf_rules`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `n0c_update_waf_rules`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_user' in params:
            header_params['X-API-USER'] = params['x_api_user']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-API-KEY'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/n0c-api/domain/update-waf-rules', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20043',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
